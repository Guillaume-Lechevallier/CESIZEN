env CORS_ORIGINS;
worker_processes auto;

events { worker_connections 1024; }

http {
    map $http_origin $cors_origin {
        default "";
        ~^($CORS_ORIGINS)$ $http_origin;
    }

    server {
        listen 80;
        server_name _;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name ${NGINX_SERVER_NAME};
        # ssl_certificate     /etc/letsencrypt/live/${NGINX_SERVER_NAME}/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/${NGINX_SERVER_NAME}/privkey.pem;
        # To generate certificates with certbot, mount /etc/letsencrypt and /var/www/certbot

        add_header Strict-Transport-Security "max-age=15552000; includeSubDomains; preload" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self' https:" always;

        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Methods "GET,POST,PUT,DELETE,OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization,Content-Type" always;

        client_max_body_size 5m;

        location / {
            proxy_pass http://frontend/;
            try_files $uri $uri/ /index.html;
            location /assets/ {
                expires 30d;
            }
        }

        location /api/ {
            proxy_pass http://backend:5000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location = /healthz {
            return 200 'ok';
        }
    }
}
